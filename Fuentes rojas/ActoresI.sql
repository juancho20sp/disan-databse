-- DOCTOR
CREATE OR REPLACE PACKAGE BODY PA_DOCTOR IS
    -- READ SPECIFIC EXAMS
    FUNCTION READ_SPEC_EXAMS(xIdExam IN NUMBER) RETURN SYS_REFCURSOR
    IS RES SYS_REFCURSOR;
    BEGIN
        RES := PKG_EXAMS.READ_SPEC_EXAMS(xIdExam);
        RETURN RES; 
    END;

    
    -- READ EXAM LAB
    FUNCTION READ_EXAM_LAB(xIdExam IN NUMBER) RETURN SYS_REFCURSOR
    IS RES SYS_REFCURSOR;
    BEGIN
        RES := PKG_EXAMS.READ_EXAM_LAB(xIdExam);
        RETURN RES; 
    END;

    -- READ ALL EXAMS
    FUNCTION READ_ALL_EXAMS RETURN SYS_REFCURSOR
    IS RES SYS_REFCURSOR;
    BEGIN
        RES := PKG_EXAMS.READ_ALL_EXAMS;
        RETURN RES; 
    END;

    -- UPDATE EXAM LAM
    PROCEDURE UPDATE_EXAM_LAB(xIdLaboratory IN NUMBER, xIdExam IN NUMBER)
     IS
    BEGIN
        PKG_EXAMS.UPDATE_EXAM_LAB(xIdLaboratory, xIdExam);
    END;
    
    -- ADD EXAM LAB
    PROCEDURE ADD_EXAM_LAB(xIdLaboratory IN NUMBER, xIdExam IN NUMBER)
    IS
    BEGIN
        PKG_EXAMS.ADD_EXAM_LAB(xIdLaboratory, xIdExam);
    END;

    
    -- ADD EXAM
    PROCEDURE ADD_EXAM(xName IN VARCHAR2)
    IS
    BEGIN
        PKG_EXAMS.ADD_EXAM(xName);
    END;

    -- READ MED TYPES
    FUNCTION READ_MED_TYPES RETURN SYS_REFCURSOR
    IS RES SYS_REFCURSOR;
    BEGIN
        RES := PKG_MEDICINES.READ_MED_TYPES;
        RETURN RES; 
    END;

     -- UPDATE MEDICATION INVENTORY
    PROCEDURE UPDATE_MEDICATION_INVENTORY(xOldId IN NUMBER, xNewId IN NUMBER)
    IS
    BEGIN
        PKG_MEDICATION_INVENTORY.UPDATE_MEDICATION_INVENTORY(xOldId, xNewId);
    END;

    -- READ MEDICATION INVENTORY
    FUNCTION READ_MEDICATION_INVENTORY RETURN SYS_REFCURSOR
    IS RES SYS_REFCURSOR;
    BEGIN
        RES := PKG_MEDICATION_INVENTORY.READ_MEDICATION_INVENTORY;
        RETURN RES; 
    END;

    -- READ MED COMPONENTS
    FUNCTION READ_MED_COMPONENTS RETURN SYS_REFCURSOR
    IS RES SYS_REFCURSOR;
    BEGIN
        RES := PKG_MEDICINES.READ_MED_COMPONENTS;
        RETURN RES; 
    END;

    -- READ ALL MEDICINES
    FUNCTION READ_ALL_MEDICINES RETURN SYS_REFCURSOR
    IS RES SYS_REFCURSOR;
    BEGIN
        RES := PKG_MEDICINES.READ_ALL_MED;
        RETURN RES; 
    END;

    -- READ SUPPLY
    FUNCTION READ_SUPPLY RETURN SYS_REFCURSOR
    IS RES SYS_REFCURSOR;
    BEGIN
        RES := PKG_SUPPLY.READ_SUPPLY;
        RETURN RES; 
    END;

    -- UPDATE SUPPLY
    PROCEDURE UPDATE_SUPPLY(xId IN NUMBER, xAmount IN NUMBER, xInventory IN NUMBER)
    IS
    BEGIN
        PKG_SUPPLY.UPDATE_SUPPLY(xId, xAmount, xInventory);
    END;

    -- READ LABORATORY
    FUNCTION READ_LABORATORY RETURN SYS_REFCURSOR
    IS RES SYS_REFCURSOR;
    BEGIN
        RES := PKG_LABORATORY.READ_LABORATORY;
        RETURN RES; 
    END;

    -- READ CITY
    FUNCTION READ_CITY RETURN SYS_REFCURSOR
    IS RES SYS_REFCURSOR;
    BEGIN
        RES := PKG_CITY.READ_CITY;
        RETURN RES; 
    END;

    -- READ APPOINTMENTS
    FUNCTION READ_APPOINTMENTS RETURN SYS_REFCURSOR
    IS RES SYS_REFCURSOR;
    BEGIN
        RES := PKG_APPOINTMENT.READ_APPOINTMENTS;
        RETURN RES; 
    END;

    -- ADD APPOINTMENT
    PROCEDURE ADD_APPOINTMENT(xIdClinicalHistory IN NUMBER, xAppointmentMotive IN VARCHAR, xDate IN DATE, xIdHospital IN NUMBER)
    IS
    BEGIN
        PKG_APPOINTMENT.ADD_APPOINTMENT(xIdClinicalHistory, xAppointmentMotive, xDate, xIdHospital);
    END;

    -- ADD APPOINTMENT DOCTOR
    PROCEDURE ADD_APPOINTMENT_DOCTOR(xDocType IN VARCHAR, xDocNum IN NUMBER, xIdAppointment IN NUMBER)
    IS
    BEGIN
        PKG_APPOINTMENT.ADD_APPOINTMENT_DOCTOR(xDocType, xDocNum, xIdAppointment);
    END;


    -- ADD DIAGNOSIS
    PROCEDURE ADD_DIAGNOSIS(xIdAppointment IN NUMBER, xDiagnosis IN VARCHAR)
    IS
    BEGIN
        PKG_APPOINTMENT.ADD_DIAGNOSIS(xIdAppointment, xDiagnosis);
    END;

    -- READ MANAGEMENT PLAN
    FUNCTION READ_MANAGEMENT_PLAN RETURN SYS_REFCURSOR
    IS RES SYS_REFCURSOR;
    BEGIN
        RES := PKG_MANAGEMENT_PLAN.READ_MANAGEMENT_PLAN;
        RETURN RES; 
    END;

    -- ADD MANAGEMENT PLAN
    PROCEDURE ADD_MANAGEMENT_PLAN(xInstructions IN VARCHAR)
    IS
    BEGIN
        PKG_MANAGEMENT_PLAN.ADD_MANAGEMENT_PLAN(xInstructions);
    END;

    -- READ ALL HOSPITALS
    FUNCTION READ_HOSPITAL RETURN SYS_REFCURSOR
    IS RES SYS_REFCURSOR;
    BEGIN
        RES := PKG_HOSPITAL.READ_HOSPITAL;
        RETURN RES; 
    END;

    -- UPDATE HOSPITAL
    PROCEDURE UPDATE_HOSPITAL(xIdHospital IN NUMBER, xName IN VARCHAR, xBeds IN NUMBER, xUCI IN NUMBER, xIdBattalion IN VARCHAR, xAddress IN VARCHAR)
    IS
    BEGIN
        PKG_HOSPITAL.UPDATE_HOSPITAL(xIdHospital, xName, xBeds, xUCI, xIdBattalion, xAddress);
    END;

    -- READ SPECIFIC NURSE
    FUNCTION READ_SPECIFIC_NURSE(xDocType IN VARCHAR, xDocNum IN NUMBER) RETURN SYS_REFCURSOR
    IS RES SYS_REFCURSOR;
    BEGIN
        RES := PKG_NURSE.READ_SPECIFIC_NURSE(xDocType, xDocNum);
        RETURN RES; 
    END;

   -- READ NURSE
   FUNCTION READ_NURSE RETURN SYS_REFCURSOR
   IS RES SYS_REFCURSOR;
    BEGIN
        RES := PKG_NURSE.READ_NURSE;
        RETURN RES; 
    END;

   -- READ SPECIFIC PATIENT
    FUNCTION READ_SPECIFIC_PATIENT(xDocType IN VARCHAR, xDocNum IN NUMBER) RETURN SYS_REFCURSOR
    IS RES SYS_REFCURSOR;
    BEGIN
        RES := PKG_PERSON.READ_SPECIFIC_PATIENT(xDocType, xDocNum);
        RETURN RES; 
    END;

    -- READ PATIENT BACKGROUND PROCEDURE
    FUNCTION READ_PATIENT_BACK_PROC(xDocType IN VARCHAR, xDocNum IN NUMBER) RETURN SYS_REFCURSOR
    IS RES SYS_REFCURSOR;
    BEGIN
        RES := PKG_PERSON.READ_PATIENT_BACK_PROC(xDocType, xDocNum);
        RETURN RES; 
    END;
    
    -- READ PATIENT BACKGROUND DISEASE
    FUNCTION READ_PATIENT_BACK_DIS(xDocType IN VARCHAR, xDocNum IN NUMBER) RETURN SYS_REFCURSOR
    IS RES SYS_REFCURSOR;
    BEGIN
        RES := PKG_PERSON.READ_PATIENT_BACK_DIS(xDocType, xDocNum);
        RETURN RES; 
    END;

    -- ADD CLINICAL HISTORY
    PROCEDURE ADD_CLINICAL_HISTORY(xDocType IN VARCHAR, xDocNum IN NUMBER)
    IS
    BEGIN
        PKG_CLINICAL_HISTORY.ADD_CLINICAL_HISTORY(xDocType, xDocNum);
    END;

    -- ADD BACKGROUND
    PROCEDURE ADD_BACKGROUND(xIdClinicalHistory IN NUMBER)
    IS
    BEGIN
        PKG_BACKGROUND.ADD_BACKGROUND(xIdClinicalHistory);
    END;

    -- READ PATIENT BACKGROUNDS
    FUNCTION READ_PATIENT_BACKGROUNDS(xIdClinicalHistory IN NUMBER) RETURN SYS_REFCURSOR
    IS RES SYS_REFCURSOR;
    BEGIN
        RES := PKG_BACKGROUND.READ_PATIENT_BACKGROUNDS(xIdClinicalHistory);
        RETURN RES; 
    END;

    -- READ DISEASES
    FUNCTION READ_DISEASES RETURN SYS_REFCURSOR
    IS RES SYS_REFCURSOR;
    BEGIN
        RES := PKG_DISEASE.READ_DISEASES;
        RETURN RES; 
    END;

    -- READ PROCEDURES
    FUNCTION READ_PROCEDURES RETURN SYS_REFCURSOR
    IS RES SYS_REFCURSOR;
    BEGIN
        RES := PKG_PROCEDURE.READ_PROCEDURES;
        RETURN RES; 
    END;

    -- READ SPECIFIC DOCTOR PROCEDURES
    FUNCTION READ_DOCTOR_PROCEDURES(
        xDocType IN VARCHAR,
        xDocNum IN NUMBER
    ) RETURN SYS_REFCURSOR
    IS RES SYS_REFCURSOR;
    BEGIN
        RES := PKG_PROCEDURE.READ_DOCTOR_PROCEDURES(xDocType, xDocNum);
        RETURN RES; 
    END;

    -- READ SPECIFIC NURSE PROCEDURES
    FUNCTION READ_NURSE_PROCEDURES(
        xDocType IN VARCHAR,
        xDocNum IN NUMBER
    ) RETURN SYS_REFCURSOR
    IS RES SYS_REFCURSOR;
    BEGIN
        RES := PKG_PROCEDURE.READ_NURSE_PROCEDURES(xDocType, xDocNum);
        RETURN RES; 
    END;

    -- ADD PROCEDURE DOCTOR
    PROCEDURE ADD_PROCEDURE_DOCTOR(xDocType IN VARCHAR, xDocNum IN NUMBER, xIdProcedure IN VARCHAR)
    IS
    BEGIN
        PKG_PROCEDURE.ADD_PROCEDURE_DOCTOR(xDocType, xDocNum, xIdProcedure);
    END;

    -- ADD PROCEDURE NURSE
    PROCEDURE ADD_PROCEDURE_NURSE(xDocType IN VARCHAR, xDocNum IN NUMBER, xIdProcedure IN VARCHAR)
    IS
    BEGIN
        PKG_PROCEDURE.ADD_PROCEDURE_NURSE(xDocType, xDocNum, xIdProcedure);
    END;

    -- FINISH APPOINTMENT
    PROCEDURE FINISH_APPOINTMENT(xIdAppointment IN NUMBER)
    IS
    BEGIN
        PKG_APPOINTMENT.FINISH_APPOINTMENT(xIdAppointment);
    END;

    -- FINISH PROCEDURE
    PROCEDURE FINISH_PROCEDURE(xIdProcedure IN NUMBER)
    IS
    BEGIN
        PKG_PROCEDURE.FINISH_PROCEDURE(xIdProcedure);
    END;




--     -- CREATE PERSON
--     PROCEDURE ADD_PERSON(
--         xDocType IN VARCHAR,
--         xDocNum IN NUMBER,
--         xName IN VARCHAR,
--         xLastname IN VARCHAR,
--         xGender IN VARCHAR,
--         xBirthdate IN DATE,
--         xEmail IN VARCHAR
--    );

--     -- CREATE DOCTOR
--    PROCEDURE ADD_DOCTOR(
--         xDocType IN VARCHAR,
--         xDocNum IN NUMBER,
--         xMilitaryForce IN VARCHAR);

--     -- CREATE APPOINTMENT
--     PROCEDURE ADD_APPOINTMENT(
--         xDocType IN VARCHAR,
--         xDocNum IN NUMBER,
--         xAppointmentMotive IN VARCHAR,
--         xDate IN DATE,
--         xDoctorEmail IN VARCHAR,
--         xHospital IN VARCHAR
--         );

--     -- ADD A NURSE TO THE APPOINTMENT
--     PROCEDURE ADD_APPOINTMENT_NURSE(
--         xNurseEmail IN VARCHAR,
--         xIdAppointment IN NUMBER
--         );

--     -- ADD BACKGROUND DISEASE TO PATIENT
--     PROCEDURE ADD_BACKGROUND_DISEASE(
--         xDocType IN VARCHAR,
--         xDocNum IN NUMBER,
--         xName IN VARCHAR,
--         xDescription IN VARCHAR
--         );

--     -- ADD BACKGROUND PROCEDURE TO PATIENT
--     PROCEDURE ADD_BACKGROUND_PROCEDURE(
--         xDocType IN VARCHAR,
--         xDocNum IN NUMBER,
--         xName IN VARCHAR,
--         xDateProcedure IN DATE,
--         xManagementPlan IN VARCHAR,
--         xHospital IN VARCHAR,
--         xMedName IN VARCHAR,
--         xMedPresentation IN VARCHAR,
--         xMedProducer IN VARCHAR,
--         xMedType IN VARCHAR
--         );

--     -- ADD PROCEDURE TO PATIENT
--     PROCEDURE ADD_PROCEDURE(
--         xDocType IN VARCHAR,
--         xDocNum IN NUMBER,
--         xName IN VARCHAR,
--         xDateProcedure IN DATE,
--         xHospital IN VARCHAR,
--         xDoctorEmail IN VARCHAR
--         );

--     -- ADD A NURSE TO THE PROCEDURE
--     PROCEDURE ADD_PROCEDURE_NURSE(
--         xNurseEmail IN VARCHAR,
--         xIdProcedure IN NUMBER
--         );
    

END PA_DOCTOR ;
/

-- NURSE
CREATE OR REPLACE PACKAGE PA_NURSE IS
    -- READ SUPPLY
    FUNCTION READ_SUPPLY RETURN SYS_REFCURSOR;

    -- UPDATE SUPPLY
    PROCEDURE UPDATE_SUPPLY(xId IN NUMBER, xAmount IN NUMBER, xInventory IN NUMBER);

     -- READ ALL LABORATORIES
    FUNCTION READ_LABORATORY RETURN SYS_REFCURSOR;

    -- READ CITY
    FUNCTION READ_CITY RETURN SYS_REFCURSOR;

    -- READ APPOINTMENTS
    FUNCTION READ_APPOINTMENTS RETURN SYS_REFCURSOR;

    -- READ MANAGEMENT PLAN
    FUNCTION READ_MANAGEMENT_PLAN RETURN SYS_REFCURSOR;

    -- READ ALL EXAMS
    FUNCTION READ_ALL_EXAMS RETURN SYS_REFCURSOR;

    -- READ SPECIFIC EXAMS
    FUNCTION READ_SPEC_EXAMS(xIdExam IN NUMBER) RETURN SYS_REFCURSOR;

    -- READ EXAM LAB
    FUNCTION READ_EXAM_LAB(xIdExam IN NUMBER) RETURN SYS_REFCURSOR;

    -- UPDATE EXAM LAM
    PROCEDURE UPDATE_EXAM_LAB(xIdLaboratory IN NUMBER, xIdExam IN NUMBER);

    -- READ SPECIFIC PATIENT
    FUNCTION READ_SPECIFIC_PATIENT(xDocType IN VARCHAR, xDocNum IN NUMBER) RETURN SYS_REFCURSOR;

    -- READ PATIENT BACKGROUND PROCEDURE
    FUNCTION READ_PATIENT_BACK_PROC(xDocType IN VARCHAR, xDocNum IN NUMBER) RETURN SYS_REFCURSOR;
    
    -- READ PATIENT BACKGROUND DISEASE
    FUNCTION READ_PATIENT_BACK_DIS(xDocType IN VARCHAR, xDocNum IN NUMBER) RETURN SYS_REFCURSOR;

    -- READ ALL HOSPITALS
    FUNCTION READ_HOSPITAL RETURN SYS_REFCURSOR;

    -- READ MED TYPES
    FUNCTION READ_MED_TYPES RETURN SYS_REFCURSOR;

    -- READ MED COMPONENTS
    FUNCTION READ_MED_COMPONENTS RETURN SYS_REFCURSOR;

    -- READ ALL MEDICINES
    FUNCTION READ_ALL_MEDICINES RETURN SYS_REFCURSOR;

    -- READ CLINICAL HISTORY
    FUNCTION READ_CLINICAL_HISTORY(xDocType IN VARCHAR2, xDocNum IN NUMBER) RETURN SYS_REFCURSOR;

    -- ADD CLINICAL HISTORY
    PROCEDURE ADD_CLINICAL_HISTORY(xDocType IN VARCHAR, xDocNum IN NUMBER);

    -- ADD BACKGROUND
    PROCEDURE ADD_BACKGROUND(xIdClinicalHistory IN NUMBER);

    -- READ PATIENT BACKGROUNDS
    FUNCTION READ_PATIENT_BACKGROUNDS(xIdClinicalHistory IN NUMBER) RETURN SYS_REFCURSOR;

    -- READ DISEASES
    FUNCTION READ_DISEASES RETURN SYS_REFCURSOR;

    -- READ PROCEDURES
    FUNCTION READ_PROCEDURES RETURN SYS_REFCURSOR;

    -- READ NURSE PROCEDURES
    FUNCTION READ_NURSE_PROCEDURES(xDocType IN VARCHAR, xDocNum IN NUMBER) RETURN SYS_REFCURSOR;

    -- ADD PROCEDURE NURSE
    PROCEDURE ADD_PROCEDURE_NURSE(xDocType IN VARCHAR, xDocNum IN NUMBER, xIdProcedure IN VARCHAR);

    -- READ DOCTOR PROCEDURE
    FUNCTION READ_DOCTOR_PROCEDURES(xDocType IN VARCHAR, xDocNum IN NUMBER) RETURN SYS_REFCURSOR;

    -- READ MEDICATION INVENTORY
    FUNCTION READ_MEDICATION_INVENTORY RETURN SYS_REFCURSOR;

    -- UPDATE MEDICATION INVENTORY
    PROCEDURE UPDATE_MEDICATION_INVENTORY(xOldId IN NUMBER, xNewId IN NUMBER);

    
--     -- CREATE PERSON
--     PROCEDURE ADD_PERSON(
--         xDocType IN VARCHAR,
--         xDocNum IN NUMBER,
--         xName IN VARCHAR,
--         xLastname IN VARCHAR,
--         xGender IN VARCHAR,
--         xBirthdate IN DATE,
--         xEmail IN VARCHAR
--    );

--     -- CREATE NURSE
--     PROCEDURE ADD_NURSE(
--         xDocType IN VARCHAR,
--         xDocNum IN NUMBER,        
--         xMilitaryForce IN VARCHAR);


--     -- ADD BACKGROUND DISEASE TO PATIENT
--     PROCEDURE ADD_BACKGROUND_DISEASE(
--         xDocType IN VARCHAR,
--         xDocNum IN NUMBER,
--         xName IN VARCHAR,
--         xDescription IN VARCHAR
--         );

--     -- ADD BACKGROUND PROCEDURE TO PATIENT
--     PROCEDURE ADD_BACKGROUND_PROCEDURE(
--         xDocType IN VARCHAR,
--         xDocNum IN NUMBER,
--         xName IN VARCHAR,
--         xDateProcedure IN DATE,
--         xManagementPlan IN VARCHAR,
--         xHospital IN VARCHAR,
--         xMedName IN VARCHAR,
--         xMedPresentation IN VARCHAR,
--         xMedProducer IN VARCHAR,
--         xMedType IN VARCHAR
--         );
  

    -- -- READ ALL LABORATORIES
    -- FUNCTION READ_LABORATORY RETURN SYS_REFCURSOR;

    -- -- READ ALL HOSPITALS
    -- FUNCTION READ_HOSPITAL RETURN SYS_REFCURSOR;

    -- -- READ ALL DOCTORS
    -- FUNCTION READ_DOCTOR RETURN SYS_REFCURSOR;

    -- -- READ NURSE APPOINTMENTS
    -- FUNCTION READ_NUR_APPOINTMENTS(
    --     xNurseEmail IN VARCHAR
    -- ) RETURN SYS_REFCURSOR;

    -- -- READ PATIENT APPOINTMENTS
    -- FUNCTION READ_PAT_APPOINTMENTS(
    --     xPatientEmail IN VARCHAR
    -- ) RETURN SYS_REFCURSOR;
    
    -- -- READ CLINICAL HISTORY
    -- FUNCTION READ_CLINICAL_HISTORY(
    --     xDocType IN VARCHAR,
    --     xDocNum IN NUMBER
    -- ) RETURN SYS_REFCURSOR;

    -- -- READ PATIENT BACKGROUND DISEASE
    -- FUNCTION READ_BACKGROUND_DISEASE(
    --     xDocType IN VARCHAR,
    --     xDocNum IN NUMBER
    -- ) RETURN SYS_REFCURSOR;

    -- -- READ PATIENT BACKGROUND PROCEDURES
    -- FUNCTION READ_BACKGROUND_PROCEDURE(
    --     xDocType IN VARCHAR,
    --     xDocNum IN NUMBER
    -- ) RETURN SYS_REFCURSOR;

    -- -- READ SPECIFIC PATIENT PROCEDURES
    -- FUNCTION READ_PATIENT_PROCEDURES(
    --     xEmail IN VARCHAR
    -- ) RETURN SYS_REFCURSOR;

    -- -- READ SPECIFIC NURSE PROCEDURES
    -- FUNCTION READ_NURSE_PROCEDURES(
    --     xEmail IN VARCHAR
    -- ) RETURN SYS_REFCURSOR;



    -- PROCEDURE UPDATE_NURSE(
    --     xDocType IN VARCHAR,
    --     xDocNum IN NUMBER,
    --     xMilitaryForce IN VARCHAR
    --     );

END PA_NURSE;

-- PATIENT
CREATE OR REPLACE PACKAGE PA_PATIENT IS
--     -- CREATE PERSON
--     PROCEDURE ADD_PERSON(
--         xDocType IN VARCHAR,
--         xDocNum IN NUMBER,
--         xName IN VARCHAR,
--         xLastname IN VARCHAR,
--         xGender IN VARCHAR,
--         xBirthdate IN DATE,
--         xEmail IN VARCHAR
--    );

--     -- CREATE NURSE
--     PROCEDURE ADD_PATIENT(
--         xDocType IN VARCHAR,
--         xDocNum IN NUMBER
--         );
  

    -- READ ALL LABORATORIES
    FUNCTION READ_LABORATORY RETURN SYS_REFCURSOR;

    -- READ CITY
    FUNCTION READ_CITY RETURN SYS_REFCURSOR;

    -- READ APPOINTMENTS
    FUNCTION READ_APPOINTMENTS RETURN SYS_REFCURSOR;

    -- READ MANAGEMENT PLAN
    FUNCTION READ_MANAGEMENT_PLAN RETURN SYS_REFCURSOR;

    -- READ SPECIFIC EXAMS
    FUNCTION READ_SPEC_EXAMS(xIdExam IN NUMBER) RETURN SYS_REFCURSOR;

    -- READ EXAM LAB
    FUNCTION READ_EXAM_LAB(xIdExam IN NUMBER) RETURN SYS_REFCURSOR;

    -- READ ALL HOSPITALS
    FUNCTION READ_HOSPITAL RETURN SYS_REFCURSOR;

    -- READ MED TYPES
    FUNCTION READ_MED_TYPES RETURN SYS_REFCURSOR;

    -- READ MED COMPONENTS
    FUNCTION READ_MED_COMPONENTS RETURN SYS_REFCURSOR;

    -- READ ALL MEDICINES
    FUNCTION READ_ALL_MEDICINES RETURN SYS_REFCURSOR;

    -- READ CLINICAL HISTORY
    FUNCTION READ_CLINICAL_HISTORY(xDocType IN VARCHAR2, xDocNum IN NUMBER) RETURN SYS_REFCURSOR;

    -- READ PATIENT BACKGROUNDS
    FUNCTION READ_PATIENT_BACKGROUNDS(xIdClinicalHistory IN NUMBER) RETURN SYS_REFCURSOR;

    -- READ DISEASES
    FUNCTION READ_DISEASES RETURN SYS_REFCURSOR;

    -- READ PROCEDURES
    FUNCTION READ_PROCEDURES RETURN SYS_REFCURSOR;

    -- READ ALL DOCTORS
    FUNCTION READ_DOCTOR RETURN SYS_REFCURSOR;

    -- READ PATIENT BACKGROUND PROCEDURE
    FUNCTION READ_PATIENT_BACK_PROC(xDocType IN VARCHAR, xDocNum IN NUMBER) RETURN SYS_REFCURSOR;
    
    -- READ PATIENT BACKGROUND DISEASE
    FUNCTION READ_PATIENT_BACK_DIS(xDocType IN VARCHAR, xDocNum IN NUMBER) RETURN SYS_REFCURSOR;

END PA_PATIENT;


-- ADMIN
CREATE OR REPLACE PACKAGE PA_ADMIN IS
    -- ADD MILITARY UNIT
    PROCEDURE ADD_MILITARY_UNIT(xName IN VARCHAR, XCity IN NUMBER, xFullLocation IN VARCHAR);

    -- READ MILITARY UNIT
    FUNCTION READ_MILITARY_UNIT RETURN SYS_REFCURSOR;

    -- UPDATE MILITARY UNIT
    PROCEDURE UPDATE_MILITARY_UNIT(xId IN NUMBER, xName IN VARCHAR, xCity IN NUMBER, xFullLocation IN VARCHAR);

    -- ADD DIVISION
    PROCEDURE ADD_DIVISION(xMilitaryUnit IN NUMBER, xCommander IN VARCHAR, xMilitaryForce IN VARCHAR);

    -- READ DIVISION
    FUNCTION READ_DIVISION RETURN SYS_REFCURSOR;

    -- UPDATE DIVISION
    PROCEDURE UPDATE_DIVISION(xId IN NUMBER, xCommander IN VARCHAR, xMilitaryForce IN VARCHAR);

    -- ADD BRIGADE
    PROCEDURE ADD_BRIGADE(xMilitaryUnit IN NUMBER, xCommander IN VARCHAR, xDivision IN NUMBER, xMilitaryForce IN VARCHAR);   

    -- READ BRIGADE
    FUNCTION READ_BRIGADE RETURN SYS_REFCURSOR;

    -- UPDATE BRIGADE
    PROCEDURE UPDATE_BRIGADE(xId IN NUMBER, xCommander IN VARCHAR, xIdDivision IN VARCHAR, xMilitaryForce IN VARCHAR);

    -- ADD BATTALION
    PROCEDURE ADD_BATTALION(xMilitaryUnit IN NUMBER, xCommander IN VARCHAR, xBrigade IN NUMBER, xMilitaryForce IN VARCHAR);

    -- READ BATTALION
    FUNCTION READ_BATTALION RETURN SYS_REFCURSOR;

    -- UPDATE BATTALION
    PROCEDURE UPDATE_BATTALION(xId IN NUMBER, xCommander IN VARCHAR, xIdBrigade IN NUMBER, xMilitaryForce IN VARCHAR);

    -- ADD SUPPLIES INVENTORY
    PROCEDURE ADD_SUPPLIES_INVENTORY;

    -- READ SUPPLIES INVENTORY
    FUNCTION READ_SUPPLIES_INVENTORY RETURN SYS_REFCURSOR;

    -- UPDATE SUPPLIES INVENTORY
    PROCEDURE UPDATE_SUPPLIES_INVENTORY(xOldId IN NUMBER, xNewId IN NUMBER);

    -- ADD SUPPLY
    PROCEDURE ADD_SUPPLY(xName IN VARCHAR, xAmount IN NUMBER, xInventory IN NUMBER);

    -- READ SUPPLY
    FUNCTION READ_SUPPLY RETURN SYS_REFCURSOR;

    -- READ SPECIFIC SUPPLY
    FUNCTION READ_SPEC_SUPPLY(xName IN VARCHAR) RETURN SYS_REFCURSOR;

    -- UPDATE SUPPLY
    PROCEDURE UPDATE_SUPPLY(xId IN NUMBER, xAmount IN NUMBER, xInventory IN NUMBER);

    -- ADD LABORATORY
    PROCEDURE ADD_LABORATORY(xName  VARCHAR, xIdCity IN NUMBER, xIdBattalion IN NUMBER, xAddress IN VARCHAR, xIdSuppliesInventory IN NUMBER);

    -- READ LABORATORY
    FUNCTION READ_LABORATORY RETURN SYS_REFCURSOR;

    -- UPDATE LABORATORY
    PROCEDURE UPDATE_LABORATORY(xIdLaboratory : NUMBER, xIdBattalion : NUMBER, xAddress : VARCHAR);

    -- ADD CITY
    PROCEDURE ADD_CITY(xName : VARCHAR, xDepartment : VARCHAR);

    -- READ CITY
    FUNCTION READ_CITY RETURN SYS_REFCURSOR;

    -- UPDATE CITY
    PROCEDURE UPDATE_CITY(xIdCity : NUMBER, xName : VARCHAR, xDepartment : NUMBER);

    -- ADD MEDICATION INVENTORY
    PROCEDURE ADD_MEDICATION_INVENTORY;

    -- READ MEDICATION INVENTORY
    FUNCTION READ_MEDICATION_INVENTORY RETURN SYS_REFCURSOR;

    -- UPDATE MEDICATION INVENTORY
    PROCEDURE UPDATE_MEDICATION_INVENTORY(xOldId : NUMBER, xNewId : NUMBER);

    -- ADD APPOINTMENT
    PROCEDURE ADD_APPOINTMENT(xIdClinicalHistory : NUMBER, xAppointmentMotive : VARCHAR, xDate : DATE, xIdHospital : NUMBER);

    -- ADD APPOINTMENT DOCTOR
    PROCEDURE ADD_APPOINTMENT_DOCTOR(xDocType : VARCHAR, xDocNum : NUMBER, xIdAppointment : NUMBER);

    -- ADD APPOINTMENT NURSE
    PROCEDURE ADD_APPOINTMENT_NURSE(xDocType : VARCHAR, xDocNum : NUMBER, xIdAppointment : NUMBER);

    -- FINISH APPOINTMENT
    PROCEDURE FINISH_APPOINTMENT(xIdAppointment : NUMBER);

    -- READ APPOINTMENT
    FUNCTION READ_APPOINTMENTS RETURN SYS_REFCURSOR;

    -- APPOINTMENT DOCTOR
    FUNCTION READ_DOC_APPOINTMENTS(xDocType : VARCHAR, xDocNum : NUMBER) RETURN SYS_REFCURSOR;

    -- APPOINTMENT NURSE
    FUNCTION READ_NUR_APPOINTMENTS(xDocType : VARCHAR, xDocNum : NUMBER) RETURN SYS_REFCURSOR;

    -- APPOINTMENT PATIENT
    FUNCTION READ_PAT_APPOINTMENTS(xDocType : VARCHAR, xDocNum : NUMBER) RETURN SYS_REFCURSOR;

    -- READ MANAGEMENT PLAN
    FUNCTION READ_MANAGEMENT_PLAN RETURN SYS_REFCURSOR;

    -- READ HOSPITAL
    FUNCTION READ_HOSPITAL RETURN SYS_REFCURSOR;

    -- ADD HOSPITAL
    PROCEDURE ADD_HOSPITAL(xName : VARCHAR, xBeds : NUMBER, xUCI : NUMBER, xIdBattalion : NUMBER, xIdCity : NUMBER, xAddress : VARCHAR, xIdSuppliesInventory : NUMBER, xIdMedicationInventory : NUMBER);

    -- UPDATE HOSPITAL
    PROCEDURE UPDATE_HOSPITAL(xIdHospital : NUMBER, xName : VARCHAR, xBeds : NUMBER, xUCI : NUMBER, xIdBattalion : VARCHAR, xAddress : VARCHAR);

    -- ADD NURSE
    PROCEDURE ADD_NURSE(xDocType : VARCHAR, xDocNum : NUMBER, xMilitaryForce : VARCHAR, xIdSpeciality : NUMBER);

    -- READ NURSE
    FUNCTION READ_NURSE RETURN SYS_REFCURSOR
    IS RES SYS_REFCURSOR;
    BEGIN
        RES := PKG_NURSE.READ_NURSE();
        RETURN RES; 
    END;

    -- READ SPECIFIC NURSE
    FUNCTION READ_SPECIFIC_NURSE(xDocType : VARCHAR, xDocNum : NUMBER) RETURN SYS_REFCURSOR
    IS RES SYS_REFCURSOR;
    BEGIN
        RES := PKG_NURSE.READ_SPECIFIC_NURSE(xDocType, xDocNum);
        RETURN RES; 
    END;

    -- UPDATE NURSE
    PROCEDURE UPDATE_NURSE(xDocType : VARCHAR, xDocNum : NUMBER, xMilitaryForce : VARCHAR)
    BEGIN
        PKG_PERSON.UPDATE_NURSE(xDocType, xDocNum, xMilitaryForce);
    END;

    -- READ APPOINTMENTS
    FUNCTION READ_APPOINTMENTS(xDocType : VARCHAR, xDocNum : NUMBER) RETURN SYS_REFCURSOR
    IS RES SYS_REFCURSOR;
    BEGIN
        RES := PKG_DOCTOR.READ_APPOINTMENTS(xDocType, xDocNum);
        RETURN RES; 
    END;

    -- ADD DOCTOR
    PROCEDURE ADD_DOCTOR(xDocType : VARCHAR, xDocNum : NUMBER, xMilitaryForce : VARCHAR)
    BEGIN
        PKG_PERSON.ADD_DOCTOR(xDocType, xDocNum, xMilitaryForce);
    END;


    -- READ ALL DOCTORS
    FUNCTION READ_ALL_DOCTORS RETURN SYS_REFCURSOR
    IS RES SYS_REFCURSOR;
    BEGIN
        RES := PKG_NURSE.READ_ALL_DOCTORS();
        RETURN RES; 
    END;

    -- READ SPECIFIC DOCTOR
    FUNCTION READ_SPECIFIC_DOCTOR(xDocType : VARCHAR, xDocNum : NUMBER) RETURN SYS_REFCURSOR
    IS RES SYS_REFCURSOR;
    BEGIN
        RES := PKG_DOCTOR.READ_SPECIFIC_DOCTOR(xDocType, xDocNum);
        RETURN RES; 
    END;

    -- UPDATE DOCTOR
    PROCEDURE UPDATE_DOCTOR(xDocType : VARCHAR, xDocNum : NUMBER, xMilitaryForce : VARCHAR)
    BEGIN
        PKG_PERSON.UPDATE_DOCTOR(xDocType, xDocNum, xMilitaryForce);  
    END;

    -- ADD PATIENT
    PROCEDURE ADD_PATIENT(xDocType : VARCHAR, xDocNum : NUMBER)
    BEGIN
        PKG_PERSON.ADD_PATIENT(xDocType, xDocNum);  
    END;

    -- READ PATIENTS
    FUNCTION READ_PATIENTS RETURN SYS_REFCURSOR
    IS RES SYS_REFCURSOR;
    BEGIN
        RES := PKG_PERSON.READ_PATIENTS();
        RETURN RES; 
    END;

    -- READ SPECIFIC PATIENT
    FUNCTION READ_SPECIFIC_PATIENT(xDocType : VARCHAR, xDocNum : NUMBER) RETURN SYS_REFCURSOR
    IS RES SYS_REFCURSOR;
    BEGIN
        RES := PKG_PERSON.READ_PERSON();
        RETURN RES; 
    END;

    -- ADD PERSON
    PROCEDURE ADD_PERSON(xDocType : VARCHAR, xDocNum : NUMBER, xName : VARCHAR, xLastname : VARCHAR, xGender : VARCHAR, xBirthdate : DATE, xEmail : VARCHAR)
    BEGIN
        PKG_PERSON.ADD_PERSON(xDocType, xDocNum, xName, xLastname, xGender, xBirthdate, xEmail);  
    END;

    -- READ PERSON
    FUNCTION READ_PERSON RETURN SYS_REFCURSOR
    IS RES SYS_REFCURSOR;
    BEGIN
        RES := PKG_PERSON.READ_PERSON();
        RETURN RES; 
    END;

    -- UPDATE PERSON
    PROCEDURE UPDATE_PERSON(xDocType : VARCHAR, xDocNum : NUMBER, xStatus : VARCHAR, xEmail : VARCHAR)
    BEGIN
        PKG_PERSON.UPDATE_PERSON(xDocType, xDocNum, xStatus, xEmail);
    END;


    -- READ CLINICAL HISTORY
    FUNCTION READ_CLINICAL_HISTORY(xDocType : VARCHAR, xDocNum : NUMBER) RETURN SYS_REFCURSOR;
    IS RES SYS_REFCURSOR;
    BEGIN
        RES := PKG_CLINICAL_HISTORY.READ_CLINICAL_HISTORY(xDocType, xDocNum);
        RETURN RES; 
    END;
    
    -- READ PATIENT BACKGROUNDS
    FUNCTION READ_PATIENT_BACKGROUNDS(xIdClinicalHistory : NUMBER) RETURN SYS_REFCURSOR
    IS RES SYS_REFCURSOR;
    BEGIN
        RES := PKG_BACKGROUND.READ_PATIENT_BACKGROUNDS(xIdClinicalHistory);
        RETURN RES; 
    END;

    -- ADD DISEASE
    PROCEDURE ADD_DISEASE(xName : VARCHAR, xDescription : VARCHAR)
    BEGIN
        PKG_DISEASE.ADD_DISEASE(xName, xDescription);
    END;

    -- ADD PROCEDURE
    PROCEDURE ADD_PROCEDURE(xDate : DATE, xName : VARCHAR, xDescription : VARCHAR, xIdClinicalHistory : NUMBER, xIdHospital : NUMBER)
    BEGIN
        PKG_PROCEDURE.ADD_PROCEDURE(xDate, xName, xDescription, xIdClinicalHistory, xIdHospital);
    END;


    -- READ PROCEDURE
    FUNCTION READ_PROCEDURES RETURN SYS_REFCURSOR
    IS RES SYS_REFCURSOR;
    BEGIN
        RES := PKG_PROCEDURE.READ_PROCEDURES();
        RETURN RES; 
    END;

    -- READ DOCTOR PROCEDURES
    FUNCTION READ_DOCTOR_PROCEDURES(xDocType : VARCHAR, xDocNum : NUMBER) RETURN SYS_REFCURSOR
    IS RES SYS_REFCURSOR;
    BEGIN
        RES := PKG_PROCEDURE.READ_DOCTOR_PROCEDURES(xDocType, xDocNum);
        RETURN RES; 
    END;



    -- READ NURSE PROCEDURES
    FUNCTION READ_NURSE_PROCEDURES(xDocType : VARCHAR, xDocNum : NUMBER) RETURN SYS_REFCURSOR
    IS RES SYS_REFCURSOR;
    BEGIN
        RES := PKG_PROCEDURE.READ_NURSE_PROCEDURES(xDocType, xDocNum);
        RETURN RES; 
    END;
    

    
    -- ADD PROCEDURE DOCTOR
    PROCEDURE ADD_PROCEDURE_DOCTOR(xDocType : VARCHAR, xDocNum : NUMBER, xIdProcedure : VARCHAR)
    BEGIN
        PKG_PROCEDURE.ADD_PROCEDURE_DOCTOR(xDocType, xDocNum , xIdProcedure);
    END;


    -- ADD PROCEDURE NURSE
    PROCEDURE ADD_PROCEDURE_NURSE(xDocType : VARCHAR, xDocNum : NUMBER, xIdProcedure : VARCHAR)
    BEGIN
        PKG_PROCEDURE.ADD_PROCEDURE_NURSE(xDocType, xDocNum , xIdProcedure);
    END;
    
    -- READ ALL EXAMS
    FUNCTION READ_ALL_EXAMS RETURN SYS_REFCURSOR
    IS RES SYS_REFCURSOR;
    BEGIN
        RES := PKG_EXAMS.READ_ALL_EXAMS();
        RETURN RES; 
    END;

    -- READ SPECIFIC EXAMS
    FUNCTION READ_SPEC_EXAMS(xIdExam : NUMBER) RETURN SYS_REFCURSOR
    IS RES SYS_REFCURSOR;
    BEGIN
        RES := PKG_EXAMS.READ_SPEC_EXAMS(xIdExam);
        RETURN RES; 
    END;

    -- READ EXAM LAB
    FUNCTION READ_EXAM_LAB(xIdExam : NUMBER) RETURN SYS_REFCURSOR
    IS RES SYS_REFCURSOR;
    BEGIN
        RES := PKG_EXAMS.READ_EXAM_LAB(xIdExam);
        RETURN RES; 
    END;

    -- UPDATE EXAM
    PROCEDURE UPDATE_EXAM_LAB(xIdLaboratory : NUMBER, xIdExam : NUMBER)
    BEGIN
        PKG_EXAMS.UPDATE_EXAM_LAB(xIdLaboratory, xIdExam);
    END;

    -- READ EXAMS NURSE
    FUNCTION READ_EXAM_NURSE(xIdExam : NUMBER, xDocType : VARCHAR, xDocNum : NUMBER) RETURN SYS_REFCURSOR
    IS RES SYS_REFCURSOR;
    BEGIN
        RES := PKG_EXAMS.READ_EXAM_NURSE(xIdExam, xDocType, xDocNum);
        RETURN RES; 
    END;

    -- READ MED TYPES
    FUNCTION READ_MED_TYPES RETURN SYS_REFCURSOR
    IS RES SYS_REFCURSOR;
    BEGIN
        RES := PKG_MEDICINES.READ_MED_TYPES();
        RETURN RES; 
    END;

     -- UPDATE MEDICATION INVENTORY
    PROCEDURE UPDATE_MEDICATION_INVENTORY(xOldId IN NUMBER, xNewId IN NUMBER)
    BEGIN
        PKG_MEDICATION_INVENTORY.UPDATE_MEDICATION_INVENTORY(xOldId, xNewId);
    END;

    -- READ MEDICATION INVENTORY
    FUNCTION READ_MEDICATION_INVENTORY RETURN SYS_REFCURSOR
    IS RES SYS_REFCURSOR;
    BEGIN
        RES := PKG_MEDICATION_INVENTORY.READ_MEDICATION_INVENTORY();
        RETURN RES; 
    END;
    

    -- READ MED COMPONENTS
    FUNCTION READ_MED_COMPONENTS RETURN SYS_REFCURSOR
    IS RES SYS_REFCURSOR;
    BEGIN
        RES := PKG_MEDICINES.READ_MED_COMPONENTS();
        RETURN RES; 
    END;

    -- READ ALL MEDICINES
    FUNCTION READ_ALL_MEDICINES RETURN SYS_REFCURSOR
    IS RES SYS_REFCURSOR;
    BEGIN
        RES := PKG_MEDICINES.READ_ALL_MED();
        RETURN RES; 
    END;

END PA_ADMIN;